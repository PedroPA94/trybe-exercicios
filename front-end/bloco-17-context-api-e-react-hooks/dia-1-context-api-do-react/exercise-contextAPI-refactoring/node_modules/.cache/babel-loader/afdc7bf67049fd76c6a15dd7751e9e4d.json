{"ast":null,"code":"var _jsxFileName = \"/home/pedro/Trybe/trybe-exercicios/front-end/bloco-17-context-api-e-react-hooks/dia-1-context-api-do-react/exercise-contextAPI-refactoring/src/App.js\";\n// src/App.js\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { selectSubreddit, fetchPostsIfNeeded, refreshSubreddit } from './actions';\nimport Posts from './components/Posts';\nimport Selector from './components/Selector';\n\nclass App extends Component {\n  componentDidMount() {\n    const {\n      dispatch,\n      selectedSubreddit\n    } = this.props;\n    dispatch(fetchPostsIfNeeded(selectedSubreddit));\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      props\n    } = this;\n\n    if (prevProps.selectedSubreddit !== props.selectedSubreddit) {\n      const {\n        dispatch,\n        selectedSubreddit\n      } = props;\n      dispatch(fetchPostsIfNeeded(selectedSubreddit));\n    }\n  }\n\n  selectSubreddit(nextSubreddit) {\n    const {\n      dispatch\n    } = this.props;\n    dispatch(selectSubreddit(nextSubreddit));\n  }\n\n  handleRefreshClick(event) {\n    event.preventDefault();\n    const {\n      dispatch,\n      selectedSubreddit\n    } = this.props;\n    dispatch(refreshSubreddit(selectedSubreddit));\n    dispatch(fetchPostsIfNeeded(selectedSubreddit));\n  }\n\n  renderLastUpdatedAt() {\n    const {\n      lastUpdated\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 12\n      }\n    }, `Last updated at ${new Date(lastUpdated).toLocaleTimeString()}.`);\n  }\n\n  renderRefreshButton() {\n    const {\n      isFetching\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: event => this.handleRefreshClick(event),\n      disabled: isFetching,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, \"Refresh\");\n  }\n\n  render() {\n    const {\n      availableSubreddits,\n      selectedSubreddit,\n      posts = [],\n      isFetching,\n      lastUpdated\n    } = this.props;\n    const isEmpty = posts.length === 0;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Selector, {\n      value: selectedSubreddit,\n      onChange: nextSubreddit => this.selectSubreddit(nextSubreddit),\n      options: availableSubreddits,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, lastUpdated && this.renderLastUpdatedAt(), this.renderRefreshButton()), isFetching && /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 24\n      }\n    }, \"Loading...\"), !isFetching && isEmpty && /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 36\n      }\n    }, \"Empty.\"), !isFetching && !isEmpty && /*#__PURE__*/React.createElement(Posts, {\n      posts: posts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 37\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const {\n    selectedSubreddit,\n    postsBySubreddit\n  } = state;\n  const {\n    isFetching,\n    lastUpdated,\n    items: posts\n  } = postsBySubreddit[selectedSubreddit];\n  return {\n    selectedSubreddit,\n    posts,\n    isFetching,\n    lastUpdated,\n    availableSubreddits: Object.keys(postsBySubreddit)\n  };\n};\n\nApp.propTypes = {\n  availableSubreddits: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired\n  })),\n  selectedSubreddit: PropTypes.string.isRequired\n};\nApp.defaultProps = {\n  lastUpdated: null,\n  posts: []\n};\nexport default connect(mapStateToProps)(App);","map":{"version":3,"names":["React","Component","PropTypes","connect","selectSubreddit","fetchPostsIfNeeded","refreshSubreddit","Posts","Selector","App","componentDidMount","dispatch","selectedSubreddit","props","componentDidUpdate","prevProps","nextSubreddit","handleRefreshClick","event","preventDefault","renderLastUpdatedAt","lastUpdated","Date","toLocaleTimeString","renderRefreshButton","isFetching","render","availableSubreddits","posts","isEmpty","length","mapStateToProps","state","postsBySubreddit","items","Object","keys","propTypes","arrayOf","string","isRequired","func","bool","number","shape","id","title","defaultProps"],"sources":["/home/pedro/Trybe/trybe-exercicios/front-end/bloco-17-context-api-e-react-hooks/dia-1-context-api-do-react/exercise-contextAPI-refactoring/src/App.js"],"sourcesContent":["// src/App.js\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { selectSubreddit, fetchPostsIfNeeded, refreshSubreddit } from './actions';\nimport Posts from './components/Posts';\nimport Selector from './components/Selector';\n\nclass App extends Component {\n  componentDidMount() {\n    const { dispatch, selectedSubreddit } = this.props;\n    dispatch(fetchPostsIfNeeded(selectedSubreddit));\n  }\n\n  componentDidUpdate(prevProps) {\n    const { props } = this;\n\n    if (prevProps.selectedSubreddit !== props.selectedSubreddit) {\n      const { dispatch, selectedSubreddit } = props;\n      dispatch(fetchPostsIfNeeded(selectedSubreddit));\n    }\n  }\n\n  selectSubreddit(nextSubreddit) {\n    const { dispatch } = this.props;\n    dispatch(selectSubreddit(nextSubreddit));\n  }\n\n  handleRefreshClick(event) {\n    event.preventDefault();\n\n    const { dispatch, selectedSubreddit } = this.props;\n    dispatch(refreshSubreddit(selectedSubreddit));\n    dispatch(fetchPostsIfNeeded(selectedSubreddit));\n  }\n\n  renderLastUpdatedAt() {\n    const { lastUpdated } = this.props;\n\n    return <span>{`Last updated at ${new Date(lastUpdated).toLocaleTimeString()}.`}</span>;\n  }\n\n  renderRefreshButton() {\n    const { isFetching } = this.props;\n\n    return (\n      <button\n        type=\"button\"\n        onClick={(event) => this.handleRefreshClick(event)}\n        disabled={isFetching}\n      >\n        Refresh\n      </button>\n    );\n  }\n\n  render() {\n    const {\n      availableSubreddits,\n      selectedSubreddit,\n      posts = [],\n      isFetching,\n      lastUpdated,\n    } = this.props;\n\n    const isEmpty = posts.length === 0;\n\n    return (\n      <div>\n        <Selector\n          value={selectedSubreddit}\n          onChange={(nextSubreddit) => this.selectSubreddit(nextSubreddit)}\n          options={availableSubreddits}\n        />\n        <div>\n          {lastUpdated && this.renderLastUpdatedAt()}\n          {this.renderRefreshButton()}\n        </div>\n        {isFetching && <h2>Loading...</h2>}\n        {!isFetching && isEmpty && <h2>Empty.</h2>}\n        {!isFetching && !isEmpty && <Posts posts={posts} />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { selectedSubreddit, postsBySubreddit } = state;\n  const { isFetching, lastUpdated, items: posts } = postsBySubreddit[selectedSubreddit];\n\n  return {\n    selectedSubreddit,\n    posts,\n    isFetching,\n    lastUpdated,\n    availableSubreddits: Object.keys(postsBySubreddit),\n  };\n};\n\nApp.propTypes = {\n  availableSubreddits: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    }),\n  ),\n  selectedSubreddit: PropTypes.string.isRequired,\n};\n\nApp.defaultProps = {\n  lastUpdated: null,\n  posts: [],\n};\n\nexport default connect(mapStateToProps)(App);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
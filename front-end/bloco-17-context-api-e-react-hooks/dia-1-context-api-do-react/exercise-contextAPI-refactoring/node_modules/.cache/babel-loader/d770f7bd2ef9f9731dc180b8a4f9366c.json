{"ast":null,"code":"import { getPostsBySubreddit } from '../services/redditAPI';\nexport const REFRESH_SUBREDDIT = 'REFRESH_SUBREDDIT';\nexport const RECEIVE_POSTS_FAILURE = 'RECEIVE_POSTS_FAILURE';\nexport const RECEIVE_POSTS_SUCCESS = 'RECEIVE_POSTS_SUCCESS';\nexport const REQUEST_POSTS = 'REQUEST_POSTS';\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT';\nexport const selectSubreddit = subreddit => ({\n  type: SELECT_SUBREDDIT,\n  subreddit\n});\nexport const refreshSubreddit = subreddit => ({\n  type: REFRESH_SUBREDDIT,\n  subreddit\n});\nexport const requestPosts = subreddit => ({\n  type: REQUEST_POSTS,\n  subreddit\n});\n\nconst receivePostsSuccess = (subreddit, json) => ({\n  type: RECEIVE_POSTS_SUCCESS,\n  posts: json.data.children.map(child => child.data),\n  receivedAt: Date.now(),\n  subreddit\n});\n\nconst receivePostsFailure = (subreddit, error) => ({\n  type: RECEIVE_POSTS_FAILURE,\n  error,\n  subreddit\n});\n\nfunction fetchPosts(subreddit) {\n  return dispatch => {\n    dispatch(requestPosts(subreddit));\n    return getPostsBySubreddit(subreddit).then(posts => dispatch(receivePostsSuccess(subreddit, posts)), error => dispatch(receivePostsFailure(subreddit, error.message)));\n  };\n}\n\nconst shouldFetchPosts = (state, subreddit) => {\n  const posts = state.postsBySubreddit[subreddit];\n  if (!posts.items) return true;\n  if (posts.isFetching) return false;\n  return posts.shouldRefreshSubreddit;\n};\n\nexport function fetchPostsIfNeeded(subreddit) {\n  return (dispatch, getState) => shouldFetchPosts(getState(), subreddit) && dispatch(fetchPosts(subreddit));\n}","map":{"version":3,"names":["getPostsBySubreddit","REFRESH_SUBREDDIT","RECEIVE_POSTS_FAILURE","RECEIVE_POSTS_SUCCESS","REQUEST_POSTS","SELECT_SUBREDDIT","selectSubreddit","subreddit","type","refreshSubreddit","requestPosts","receivePostsSuccess","json","posts","data","children","map","child","receivedAt","Date","now","receivePostsFailure","error","fetchPosts","dispatch","then","message","shouldFetchPosts","state","postsBySubreddit","items","isFetching","shouldRefreshSubreddit","fetchPostsIfNeeded","getState"],"sources":["/home/pedro/Trybe/trybe-exercicios/front-end/bloco-17-context-api-e-react-hooks/dia-1-context-api-do-react/exercise-contextAPI-refactoring/src/actions/index.js"],"sourcesContent":["import { getPostsBySubreddit } from '../services/redditAPI';\n\nexport const REFRESH_SUBREDDIT = 'REFRESH_SUBREDDIT';\nexport const RECEIVE_POSTS_FAILURE = 'RECEIVE_POSTS_FAILURE';\nexport const RECEIVE_POSTS_SUCCESS = 'RECEIVE_POSTS_SUCCESS';\nexport const REQUEST_POSTS = 'REQUEST_POSTS';\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT';\n\nexport const selectSubreddit = (subreddit) => ({\n  type: SELECT_SUBREDDIT,\n  subreddit,\n});\n\nexport const refreshSubreddit = (subreddit) => ({\n  type: REFRESH_SUBREDDIT,\n  subreddit,\n});\n\nexport const requestPosts = (subreddit) => ({\n  type: REQUEST_POSTS,\n  subreddit,\n});\n\nconst receivePostsSuccess = (subreddit, json) => ({\n  type: RECEIVE_POSTS_SUCCESS,\n  posts: json.data.children.map((child) => child.data),\n  receivedAt: Date.now(),\n  subreddit,\n});\n\nconst receivePostsFailure = (subreddit, error) => ({\n  type: RECEIVE_POSTS_FAILURE,\n  error,\n  subreddit,\n});\n\nfunction fetchPosts(subreddit) {\n  return (dispatch) => {\n    dispatch(requestPosts(subreddit));\n\n    return getPostsBySubreddit(subreddit).then(\n      (posts) => dispatch(receivePostsSuccess(subreddit, posts)),\n      (error) => dispatch(receivePostsFailure(subreddit, error.message)),\n    );\n  };\n}\n\nconst shouldFetchPosts = (state, subreddit) => {\n  const posts = state.postsBySubreddit[subreddit];\n\n  if (!posts.items) return true;\n  if (posts.isFetching) return false;\n  return posts.shouldRefreshSubreddit;\n};\n\nexport function fetchPostsIfNeeded(subreddit) {\n  return (dispatch, getState) =>\n    shouldFetchPosts(getState(), subreddit) && dispatch(fetchPosts(subreddit));\n}\n"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,uBAApC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,eAAe,GAAIC,SAAD,KAAgB;EAC7CC,IAAI,EAAEH,gBADuC;EAE7CE;AAF6C,CAAhB,CAAxB;AAKP,OAAO,MAAME,gBAAgB,GAAIF,SAAD,KAAgB;EAC9CC,IAAI,EAAEP,iBADwC;EAE9CM;AAF8C,CAAhB,CAAzB;AAKP,OAAO,MAAMG,YAAY,GAAIH,SAAD,KAAgB;EAC1CC,IAAI,EAAEJ,aADoC;EAE1CG;AAF0C,CAAhB,CAArB;;AAKP,MAAMI,mBAAmB,GAAG,CAACJ,SAAD,EAAYK,IAAZ,MAAsB;EAChDJ,IAAI,EAAEL,qBAD0C;EAEhDU,KAAK,EAAED,IAAI,CAACE,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAwBC,KAAD,IAAWA,KAAK,CAACH,IAAxC,CAFyC;EAGhDI,UAAU,EAAEC,IAAI,CAACC,GAAL,EAHoC;EAIhDb;AAJgD,CAAtB,CAA5B;;AAOA,MAAMc,mBAAmB,GAAG,CAACd,SAAD,EAAYe,KAAZ,MAAuB;EACjDd,IAAI,EAAEN,qBAD2C;EAEjDoB,KAFiD;EAGjDf;AAHiD,CAAvB,CAA5B;;AAMA,SAASgB,UAAT,CAAoBhB,SAApB,EAA+B;EAC7B,OAAQiB,QAAD,IAAc;IACnBA,QAAQ,CAACd,YAAY,CAACH,SAAD,CAAb,CAAR;IAEA,OAAOP,mBAAmB,CAACO,SAAD,CAAnB,CAA+BkB,IAA/B,CACJZ,KAAD,IAAWW,QAAQ,CAACb,mBAAmB,CAACJ,SAAD,EAAYM,KAAZ,CAApB,CADd,EAEJS,KAAD,IAAWE,QAAQ,CAACH,mBAAmB,CAACd,SAAD,EAAYe,KAAK,CAACI,OAAlB,CAApB,CAFd,CAAP;EAID,CAPD;AAQD;;AAED,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQrB,SAAR,KAAsB;EAC7C,MAAMM,KAAK,GAAGe,KAAK,CAACC,gBAAN,CAAuBtB,SAAvB,CAAd;EAEA,IAAI,CAACM,KAAK,CAACiB,KAAX,EAAkB,OAAO,IAAP;EAClB,IAAIjB,KAAK,CAACkB,UAAV,EAAsB,OAAO,KAAP;EACtB,OAAOlB,KAAK,CAACmB,sBAAb;AACD,CAND;;AAQA,OAAO,SAASC,kBAAT,CAA4B1B,SAA5B,EAAuC;EAC5C,OAAO,CAACiB,QAAD,EAAWU,QAAX,KACLP,gBAAgB,CAACO,QAAQ,EAAT,EAAa3B,SAAb,CAAhB,IAA2CiB,QAAQ,CAACD,UAAU,CAAChB,SAAD,CAAX,CADrD;AAED"},"metadata":{},"sourceType":"module"}